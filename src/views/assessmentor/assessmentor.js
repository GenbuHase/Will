const logInputter = document.getElementById("assessmentor-log");
const startBtn = document.getElementById("assessmentor-start");
const enquete = M.Modal.init(document.getElementById("enquete"));
const enqueteText = document.getElementById("enquete-text");
const enqueteVocabulary = document.getElementById("enquete-form-vocabulary-point");
const enqueteVocabularyDescription = document.getElementById("enquete-form-vocabulary-description");
const enqueteStructure = document.getElementById("enquete-form-structure-point");
const enqueteStructureDescription = document.getElementById("enquete-form-structure-description");
const enqueteNextBtn = document.getElementById("enquete-next");



const DELIMITOR = /== Generated by Shiina ==\r?\n/;
const descriptions = {
	vocabulary: [ "語彙が正しいものでなく、文章として成立しない。", "語彙の種類は正しいが、語彙に多少の違和感を感じる。", "語彙に違和感を感じない。" ],
	structure: [ "文法構造に違和感を感じる。", "文法構造に多少の違和感を感じるが、文章の流れが理解できる。", "文法構造に違和感を感じない。" ]
};

const changeVocabularyValue = value => enqueteVocabularyDescription.textContent = descriptions.vocabulary[value - 1];

const result = {
	vocabulary: [],
	structure: []
};

window.addEventListener("DOMContentLoaded", () => {
	const dialogs = document.querySelectorAll(".modal");
	const ranges = document.querySelectorAll(".range-field > Input[Type='Range']");

	for (const dialog of dialogs) M.Modal.init(dialog);
	for (const range of ranges) M.Range.init(range);
});

window.addEventListener("DOMContentLoaded", () => {
	startBtn.addEventListener("click", () => {
		enquete.el.dataset.index = 0;
		enqueteNextBtn.click();

		enquete.open();
	});

	enquete.el.addEventListener("keydown", e => {
		if (e.keyCode === 13) return enqueteNextBtn.click();
		[ enqueteVocabulary, enqueteStructure ][ Math.floor(parseInt(e.key) / 3) - (parseInt(e.key) % 3 ? 0 : 1) ].value = parseInt(e.key) % 3 + (parseInt(e.key) % 3 ? 0 : 3);
	});

	enqueteVocabulary.addEventListener("change", e => changeVocabularyValue(e.target.value));
	enqueteStructure.addEventListener("change", e => enqueteStructureDescription.textContent = descriptions.structure[e.target.value - 1]);

	enqueteNextBtn.addEventListener("click", () => {
		const index = enquete.el.dataset.index;
		result.vocabulary[index] = parseInt(enqueteVocabulary.value);
		result.structure[index] = parseInt(enqueteStructure.value);

		if (parseInt(index) === logInputter.value.split(DELIMITOR).length - 1) {
			enquete.close();
			console.log(result);

			return;
		}

		const text = logInputter.value.split(DELIMITOR)[++enquete.el.dataset.index];
		enqueteText.textContent = text;
	});
});



/* global M */